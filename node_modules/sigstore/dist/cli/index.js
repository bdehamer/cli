"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processArgv = void 0;
/*
Copyright 2022 The Sigstore Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const fs_1 = __importDefault(require("fs"));
const index_1 = require("../index");
const enc = __importStar(require("../encoding"));
const INTOTO_PAYLOAD_TYPE = 'application/vnd.in-toto+json';
async function cli(args) {
    switch (args[0]) {
        case 'sign':
            await sign(args[1]);
            break;
        case 'sign-dsse':
            await signDSSE(args[1], args[2]);
            break;
        case 'verify':
            await verify(args[1], args[2]);
            break;
        case 'verify-dsse':
            await verifyDSSE(args[1]);
            break;
        default:
            throw 'Unknown command';
    }
}
const signOptions = {
    oidcClientID: 'sigstore',
    oidcIssuer: 'https://oauth2.sigstore.dev/auth',
};
async function sign(artifactPath) {
    const buffer = fs_1.default.readFileSync(artifactPath);
    const bundle = await index_1.sigstore.sign(buffer, signOptions);
    console.log(JSON.stringify(bundle));
    const url = `${index_1.sigstore.getRekorBaseUrl(signOptions)}/api/v1/log/entries`;
    console.error(`Created entry at index ${bundle.logIndex}, available at`);
    console.error(`${url}?logIndex=${bundle.logIndex}`);
}
async function signDSSE(artifactPath, payloadType = INTOTO_PAYLOAD_TYPE) {
    const buffer = fs_1.default.readFileSync(artifactPath);
    const bundle = await index_1.sigstore.signAttestation(buffer, payloadType, signOptions);
    console.log(JSON.stringify(bundle));
}
async function verify(artifactPath, bundlePath) {
    const payload = fs_1.default.readFileSync(artifactPath);
    const bundleFile = fs_1.default.readFileSync(bundlePath);
    const bundle = JSON.parse(bundleFile.toString('utf-8'));
    const sig = bundle.attestation.signature;
    const cert = enc.base64Decode(bundle.certificate);
    const result = await index_1.sigstore.verify(payload, sig, cert);
    if (result) {
        console.error('Verified OK');
    }
    else {
        throw 'Signature verification failed';
    }
}
async function verifyDSSE(bundlePath) {
    const bundleFile = fs_1.default.readFileSync(bundlePath);
    const bundle = JSON.parse(bundleFile.toString('utf-8'));
    const result = await index_1.sigstore.verifyDSSE(bundle);
    if (result) {
        console.error('Verified OK');
    }
    else {
        throw 'Signature verification failed';
    }
}
async function processArgv() {
    try {
        await cli(process.argv.slice(2));
        process.exit(0);
    }
    catch (e) {
        console.error(e);
        process.exit(1);
    }
}
exports.processArgv = processArgv;
