"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.sign = void 0;
const sigstore = __importStar(require("./sigstore"));
async function sign(payload, payloadType, options = {}) {
    const paeBuffer = pae(payloadType, payload);
    const bundle = await sigstore.sign(paeBuffer, options);
    const envelope = {
        payloadType: payloadType,
        payload: payload.toString('base64'),
        signatures: [
            {
                keyid: '',
                sig: bundle.attestation.signature,
            },
        ],
    };
    const dsseBundle = {
        attestationType: 'attestation/dsse',
        attestation: envelope,
        certificate: bundle.certificate,
        signedEntryTimestamp: bundle.signedEntryTimestamp,
        integratedTime: bundle.integratedTime,
        logIndex: bundle.logIndex,
        logID: bundle.logID,
    };
    return dsseBundle;
}
exports.sign = sign;
async function verify(envelope, certificate, options = {}) {
    const payloadType = envelope.payloadType;
    const payload = Buffer.from(envelope.payload, 'base64');
    const signature = envelope.signatures[0].sig;
    const paeBuffer = pae(payloadType, payload);
    const verified = await sigstore.verify(paeBuffer, signature, certificate, options);
    return verified;
}
exports.verify = verify;
// DSSE Pre-Authentication Encoding
function pae(payloadType, payload) {
    const prefix = Buffer.from(`DSSEv1 ${payloadType.length} ${payloadType} ${payload.length} `, 'ascii');
    return Buffer.concat([prefix, payload]);
}
