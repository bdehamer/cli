declare const INTOTO_KIND = "intoto";
declare const HASHEDREKORD_KIND = "hashedrekord";
export interface RekorOptions {
    baseURL?: string;
}
interface ArtifactHash {
    algorithm: 'sha256';
    value: string;
}
interface BaseKind {
    apiVersion: string;
    kind: string;
}
export interface HashedRekordKind extends BaseKind {
    kind: typeof HASHEDREKORD_KIND;
    spec: {
        data: {
            hash: ArtifactHash;
        };
        signature: {
            content: string;
            publicKey: {
                content: string;
            };
        };
    };
}
export interface ProposedIntotoKind extends BaseKind {
    kind: typeof INTOTO_KIND;
    spec: {
        content: {
            envelope: string;
        };
        publicKey: string;
    };
}
export interface IntotoKind extends BaseKind {
    kind: typeof INTOTO_KIND;
    spec: {
        content: {
            hash: ArtifactHash;
            payloadHash: ArtifactHash;
        };
        publicKey: string;
    };
}
export declare type EntryKind = HashedRekordKind | IntotoKind;
export declare type ProposedEntryKind = HashedRekordKind | ProposedIntotoKind;
export interface IntotoOptions {
    envelope: string;
    publicKey: string;
}
export interface HashedRekordOptions {
    artifactSignature: string;
    artifactDigest: string;
    publicKey: string;
}
export interface Entry {
    uuid: string;
    body: string;
    integratedTime: number;
    logID: string;
    logIndex: number;
    verification: EntryVerification;
    attestation?: object;
}
export interface EntryVerification {
    inclusionProof: InclusionProof;
    signedEntryTimestamp: string;
}
export interface InclusionProof {
    hashes: string[];
    logIndex: number;
    rootHash: string;
    treeSize: number;
}
export interface SearchIndex {
    email?: string;
    hash?: string;
}
export interface SearchLogQuery {
    entries?: EntryKind[];
    entryUUIDs?: string[];
    logIndexes?: number[];
}
/**
 * Rekor API client.
 */
export declare class Rekor {
    private fetch;
    private baseUrl;
    constructor(options: RekorOptions);
    static getBaseUrl(baseURL?: string): string;
    /**
     * Create a new intoto entry in the Rekor log.
     * @param intoto {IntotoOptions} Data to create a new entry
     * @returns {Promise<Entry>} The created entry
     */
    createIntoEntry(intoto: IntotoOptions): Promise<Entry>;
    /**
     * Create a new hashedrekord entry in the Rekor log.
     * @param hashedRekord {HashedRekordOptions} Data to create a new entry
     * @returns {Promise<Entry>} The created entry
     */
    createHashedRekordEntry(hashedRekord: HashedRekordOptions): Promise<Entry>;
    /**
     * Create a new entry in the Rekor log.
     * @param propsedEntry {ProposedEntryKind} Data to create a new entry
     * @returns {Promise<Entry>} The created entry
     */
    createEntry(propsedEntry: ProposedEntryKind): Promise<Entry>;
    /**
     * Get an entry from the Rekor log.
     * @param uuid {string} The UUID of the entry to retrieve
     * @returns {Promise<Entry>} The retrieved entry
     */
    getEntry(uuid: string): Promise<Entry>;
    /**
     * Search the Rekor log index for entries matching the given query.
     * @param opts {SearchIndex} Options to search the Rekor log
     * @returns {Promise<string[]>} UUIDs of matching entries
     */
    searchIndex(opts: SearchIndex): Promise<string[]>;
    /**
     * Search the Rekor logs for matching the given query.
     * @param opts {SearchLogQuery} Query to search the Rekor log
     * @returns {Promise<Entry[]>} List of matching entries
     */
    searchLog(opts: SearchLogQuery): Promise<Entry[]>;
}
export {};
//# sourceMappingURL=rekor.d.ts.map