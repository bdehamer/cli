"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verifier = void 0;
const crypto = __importStar(require("./crypto"));
const enc = __importStar(require("./encoding"));
const util_1 = require("./util");
class Verifier {
    constructor(options) {
        this.rekor = options.rekor;
    }
    async verify(payload, signature, certificate) {
        signature = signature.trim();
        return crypto.verifyBlob(certificate, payload, signature);
    }
    async verifyDSSE(bundle) {
        const payloadType = bundle.attestation.payloadType;
        const payload = Buffer.from(bundle.attestation.payload, 'base64');
        const paeBuffer = (0, util_1.dssePreAuthEncoding)(payloadType, payload);
        if (bundle.attestation.signatures.length < 1) {
            throw new Error('No signatures found in bundle');
        }
        // TODO: Do we need to handle multiple signatures?
        const signature = bundle.attestation.signatures[0].sig;
        const certificate = enc.base64Decode(bundle.certificate);
        return crypto.verifyBlob(certificate, paeBuffer, signature);
    }
    // TODO: come back and clean this up. Currently unused but may be useful when
    // we introduce verification against the Rekor log.
    async lookupCertificate(payload, signature) {
        // Calculate artifact digest
        const digest = crypto.hash(payload);
        // Look-up Rekor entries by artifact digest
        const uuids = await this.rekor.searchIndex({ hash: `sha256:${digest}` });
        let b64Cert;
        // Find Rekor entry with matching artifact signature
        // TODO: purposefully doing this lookup serially for now -- consider parallelizing
        for (const uuid of uuids) {
            const entry = await this.rekor.getEntry(uuid);
            const body = JSON.parse(enc.base64Decode(entry.body));
            if (body.spec.signature.content == signature) {
                b64Cert = body.spec.signature.publicKey.content;
                break;
            }
        }
        // If we have a cert here it means we found a matching entry
        if (b64Cert) {
            return enc.base64Decode(b64Cert);
        }
    }
}
exports.Verifier = Verifier;
