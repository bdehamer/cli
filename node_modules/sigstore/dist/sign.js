"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = void 0;
/*
Copyright 2022 The Sigstore Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const bundle_1 = require("./bundle");
const crypto = __importStar(require("./crypto"));
const enc = __importStar(require("./encoding"));
const util_1 = require("./util");
class Signer {
    constructor(options) {
        this.identityProviders = [];
        this.fulcio = options.fulcio;
        this.rekor = options.rekor;
        this.identityProviders = options.identityProviders;
    }
    async signBlob(payload) {
        // Get signature and signing certificate for payload
        const { signature, certificate } = await this.sign(payload);
        // Calculate artifact digest
        const digest = crypto.hash(payload);
        const certificateB64 = enc.base64Encode(certificate);
        // Create Rekor entry
        const entry = await this.rekor.createHashedRekordEntry({
            artifactDigest: digest,
            artifactSignature: signature,
            publicKey: certificateB64,
        });
        return (0, bundle_1.buildBlobBundle)(digest, signature, certificateB64, entry);
    }
    async signAttestation(payload, payloadType) {
        // Pre-authentication encoding to be signed
        const paeBuffer = (0, util_1.dssePreAuthEncoding)(payloadType, payload);
        // Get signature and signing certificate for pae
        const { signature, certificate } = await this.sign(paeBuffer);
        const dsse = {
            payloadType,
            payload: payload.toString('base64'),
            signatures: [
                {
                    keyid: '',
                    sig: signature,
                },
            ],
        };
        const certificateB64 = enc.base64Encode(certificate);
        const entry = await this.rekor.createIntoEntry({
            envelope: JSON.stringify(dsse),
            publicKey: certificateB64,
        });
        return (0, bundle_1.buildDSSEBundle)(dsse, certificateB64, entry);
    }
    async sign(payload) {
        // Create emphemeral key pair
        const keypair = crypto.generateKeyPair();
        // Extract public key as base64-encoded string
        const publicKeyB64 = keypair.publicKey
            .export({ type: 'spki', format: 'der' })
            .toString('base64');
        // Retrieve identity token from one of the supplied identity providers
        const identityToken = await this.getIdentityToken();
        // Extract challenge claim from OIDC token
        const subject = (0, util_1.extractJWTSubject)(identityToken);
        // Construct challenge value by encrypting subject with private key
        const challenge = crypto.signBlob(keypair.privateKey, subject);
        // Create signing certificate
        const certificate = await this.fulcio.createSigningCertificate({
            identityToken,
            publicKey: publicKeyB64,
            challenge,
        });
        // Generate artifact signature
        const signature = crypto.signBlob(keypair.privateKey, payload);
        return {
            signature,
            certificate,
        };
    }
    async getIdentityToken() {
        const aggErrs = [];
        for (const provider of this.identityProviders) {
            try {
                const token = await provider.getToken();
                if (token) {
                    return token;
                }
            }
            catch (err) {
                aggErrs.push(err);
            }
        }
        throw new Error(`Identity token providers failed: ${aggErrs}`);
    }
}
exports.Signer = Signer;
