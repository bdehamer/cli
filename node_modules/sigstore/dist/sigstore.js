"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyDSSE = exports.verify = exports.signAttestation = exports.sign = exports.getRekorBaseUrl = void 0;
const client_1 = require("./client");
const identity_1 = __importDefault(require("./identity"));
const sign_1 = require("./sign");
const verify_1 = require("./verify");
function getRekorBaseUrl(options) {
    return client_1.Rekor.getBaseUrl(options === null || options === void 0 ? void 0 : options.rekorBaseURL);
}
exports.getRekorBaseUrl = getRekorBaseUrl;
async function sign(payload, options = {}) {
    const fulcio = new client_1.Fulcio({ baseURL: options.fulcioBaseURL });
    const rekor = new client_1.Rekor({ baseURL: options.rekorBaseURL });
    const idps = configureIdentityProviders(options);
    return new sign_1.Signer({
        fulcio,
        rekor,
        identityProviders: idps,
    }).signBlob(payload);
}
exports.sign = sign;
async function signAttestation(payload, payloadType, options = {}) {
    const fulcio = new client_1.Fulcio({ baseURL: options.fulcioBaseURL });
    const rekor = new client_1.Rekor({ baseURL: options.rekorBaseURL });
    const idps = configureIdentityProviders(options);
    return new sign_1.Signer({
        fulcio,
        rekor,
        identityProviders: idps,
    }).signAttestation(payload, payloadType);
}
exports.signAttestation = signAttestation;
async function verify(payload, signature, certificate, options = {}) {
    const rekor = new client_1.Rekor({ baseURL: options.rekorBaseURL });
    return new verify_1.Verifier({ rekor }).verify(payload, signature, certificate);
}
exports.verify = verify;
async function verifyDSSE(bundle, options = {}) {
    const rekor = new client_1.Rekor({ baseURL: options.rekorBaseURL });
    return new verify_1.Verifier({ rekor }).verifyDSSE(bundle);
}
exports.verifyDSSE = verifyDSSE;
// Translates the IdenityProviderOptions into a list of Providers which
// should be queried to retrieve an identity token.
function configureIdentityProviders(options) {
    const idps = [];
    const token = options.identityToken;
    // If an explicit identity token is provided, use that. Setup a dummy
    // provider that just returns the token. Otherwise, setup the CI context
    // provider and (optionally) the OAuth provider.
    if (token) {
        idps.push({ getToken: () => Promise.resolve(token) });
    }
    else {
        idps.push(identity_1.default.ciContextProvider());
        if (options.oidcIssuer && options.oidcClientID) {
            idps.push(identity_1.default.oauthProvider(options.oidcIssuer, options.oidcClientID, options.oidcClientSecret));
        }
    }
    return idps;
}
