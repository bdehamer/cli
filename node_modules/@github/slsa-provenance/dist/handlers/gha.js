"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GHAProvenanceHandler = void 0;
const base_1 = require("./base");
const BUILD_TYPE_PREFIX = 'https://github.com/npm/slsa-provenance/gha';
const BUILD_TYPE_VERSION = 'v0';
class GHAProvenanceHandler extends base_1.ProvenanceHandlerBase {
    enabled() {
        return (process.env['CI'] === 'true' && process.env['GITHUB_ACTIONS'] === 'true');
    }
    async generatePredicate() {
        const env = process.env;
        return {
            buildType: `${BUILD_TYPE_PREFIX}@${BUILD_TYPE_VERSION}`,
            builder: { id: this.getBuilderId() },
            invocation: {
                configSource: {
                    uri: `git+${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}@${env.GITHUB_REF}`,
                    digest: {
                        sha1: env.GITHUB_SHA,
                    },
                    entryPoint: env.GITHUB_WORKFLOW_PATH || env.GITHUB_WORKFLOW,
                },
                parameters: {},
                environment: this.getEnvironment(),
            },
            metadata: {
                buildInvocationId: `${env.GITHUB_RUN_ID}-${env.GITHUB_RUN_ATTEMPT}`,
                completeness: {
                    parameters: false,
                    environment: false,
                    materials: false,
                },
                reproducible: false,
            },
            materials: [
                {
                    uri: `git+${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}`,
                    digest: {
                        sha1: env.GITHUB_SHA,
                    },
                },
            ],
        };
    }
    getEnvironment() {
        const env = process.env;
        return {
            GITHUB_EVENT_NAME: env.GITHUB_EVENT_NAME,
            GITHUB_JOB: env.GITHUB_JOB,
            GITHUB_REF: env.GITHUB_REF,
            GITHUB_REF_TYPE: env.GITHUB_REF_TYPE,
            GITHUB_REPOSITORY: env.GITHUB_REPOSITORY,
            GITHUB_REPOSITORY_OWNER: env.GITHUB_REPOSITORY_OWNER,
            GITHUB_RUN_ATTEMPT: env.GITHUB_RUN_ATTEMPT,
            GITHUB_RUN_ID: env.GITHUB_RUN_ID,
            GITHUB_RUN_NUMBER: env.GITHUB_RUN_NUMBER,
            GITHUB_SHA: env.GITHUB_SHA,
            GITHUB_WORKFLOW: env.GITHUB_WORKFLOW,
            IMAGE_OS: env.ImageOS,
            IMAGE_VERSION: env.ImageVersion,
            RUNNER_ARCH: env.RUNNER_ARCH,
            RUNNER_NAME: env.RUNNER_NAME,
            RUNNER_OS: env.RUNNER_OS,
        };
    }
}
exports.GHAProvenanceHandler = GHAProvenanceHandler;
